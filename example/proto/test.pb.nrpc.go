// This code was autogenerated from nevent, do not edit.

package proto

import (
	"context"
	"fmt"

	"github.com/LilithGames/nevent"
	pb "github.com/LilithGames/nevent/proto"
	"github.com/LilithGames/nrpc"
	"github.com/golang/protobuf/proto"
	"github.com/nats-io/nats.go"
	"google.golang.org/grpc"
)
const (
     TestNServiceName = "NRPC4Test"
)

type TestNInterface interface {
	PersonAsk(ctx context.Context, m *Person) (*Company, error)
}

func RegisterTest(s *nrpc.Server, in TestNInterface, opts ...nevent.ListenOption) error {
	GenEhPersonAsk := func(ctx context.Context, m *nats.Msg) (interface{}, error) {
		data := new(Person)
		err := proto.Unmarshal(m.Data, data)
		if err != nil {
			return nil, fmt.Errorf("server unmarshal ask: %w", err)
		}
		resp, err := in.PersonAsk(ctx, data)
		if err != nil {
			return nil, err
		}
		bs, err := proto.Marshal(resp)
		if err != nil {
			return nil, fmt.Errorf("server marshal answer: %w", err)
		}
		return bs, nil
	}
	PersonAskGenSub, err := s.EventSvr.ListenEvent("nrpc.Test.proto.Test.PersonAsk", pb.EventType_Ask, GenEhPersonAsk, opts...)
    if err != nil {
        return err
    }

    s.AppendSubcription(PersonAskGenSub)
    return err
}

// generete for nrpc client
type TestNClientImpl struct {
	nc *nevent.Client
    opt []nevent.EmitOption
}

type TestNClient interface {
    PersonAsk(ctx context.Context, e *Person, opts ...grpc.CallOption) (*Company, error)
}

func NewTestNClient(nc *nevent.Client, opt ...nevent.EmitOption) TestNClient {
    opList := make([]nevent.EmitOption, 0)
    opList = append(opList, opt ...)
	return &TestNClientImpl{nc: nc, opt: opList} 
}

func (nCli *TestNClientImpl)PersonAsk(ctx context.Context, e *Person, opts ...grpc.CallOption) (*Company, error) {
	msg := nats.NewMsg("nrpc.proto.Test.PersonAsk")
	data, err := proto.Marshal(e)
	if err != nil {
		return nil, fmt.Errorf("ask marshal error %w", err)
	}
	msg.Data = data
	resp, err := nCli.nc.Ask(ctx, msg, nCli.opt ...)
	if err != nil {
		return nil, err
	}
	answer := new(Company)
	err = proto.Unmarshal(resp, answer)
	if err != nil {
		return nil, fmt.Errorf("answer unmarshal error %w", err)
	}
	return answer, nil
}

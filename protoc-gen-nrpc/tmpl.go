package main

const tmpl = `// This code was autogenerated from nevent, do not edit.

package {{ package . }}

import (
	"context"
	"fmt"

	"github.com/LilithGames/nevent"
	pb "github.com/LilithGames/nevent/proto"
	"github.com/LilithGames/nrpc"
	"github.com/golang/protobuf/proto"
	"github.com/nats-io/nats.go"
	"google.golang.org/grpc"
)

{{- $foptions := options . }}
{{- $fsubject := default $foptions.Subject (package .) }}
{{- range .Services }}
{{- $svc := .Name }}
{{- $soptions := options . }}
{{- $nrpcoptions := nrpcoptions .}}
{{- $isnrpcsvr := $nrpcoptions.Nrpc }}
{{- $ssubject := default $soptions.Subject $svc }}
{{- $bsubject := printf "%s.%s" $fsubject $ssubject }}
{{- if $isnrpcsvr }}
const (
     {{$svc}}4NRpcName = "NRpc4{{$svc}}"
)

type {{$svc}}NRpc interface {
    {{- range .Methods }}
    {{- $nrpcoptions := nrpcoptions .}}
    {{- $isnrpcfun := $nrpcoptions.Nrpc }}
    {{- if $isnrpcfun }}
	{{ name . }}(ctx context.Context, m *{{ name .Input }}) (*{{ name .Output }}, error)
    {{- end }}
    {{- end }}
}

func Register{{$svc}}NRpc(s *nrpc.Server, in {{$svc}}NRpc, opts ...nevent.ListenOption) error {
    {{- range .Methods }}
    {{- $oname := name .Output }}
    {{- $moptions := options . }}
    {{- $msubject := default $moptions.Subject (name .) }}
    {{- $subject := printf "nrpc.%s.%s.%s" $fsubject $ssubject $msubject }}
    {{- $nrpcoptions := nrpcoptions .}}
    {{- $isnrpcfun := $nrpcoptions.Nrpc }}

    {{- if $isnrpcfun }}
	GenEh{{ name . }} := func(ctx context.Context, m *nats.Msg) (interface{}, error) {
		data := new({{name .Input }})
		err := proto.Unmarshal(m.Data, data)
		if err != nil {
			return nil, fmt.Errorf("server unmarshal ask: %w", err)
		}
		resp, err := in.{{ name . }}(ctx, data)
		if err != nil {
			return nil, err
		}
		bs, err := proto.Marshal(resp)
		if err != nil {
			return nil, fmt.Errorf("server marshal answer: %w", err)
		}
		return bs, nil
	}
	{{ name . }}GenSub, err := s.EventSvr.ListenEvent("{{ $subject }}", pb.EventType_Ask, GenEh{{ name . }}, opts...)
    if err != nil {
        return err
    }

    s.AppendSubcription({{ name .}}GenSub)
    {{- end}}

    {{- end }}
    return err
}

// generete for nrpc client
type {{ $svc }}NRpcClientImpl struct {
	nc *nevent.Client
    opt []nevent.EmitOption
}

type {{ $svc }}NRpcClient interface {
{{- range .Methods }}
{{- $nrpcoptions := nrpcoptions .}}
{{- $isnrpcfun := $nrpcoptions.Nrpc }}
{{- if $isnrpcfun }}
    {{ name . }}(ctx context.Context, e *{{ name .Input }}, opts ...grpc.CallOption) (*{{ name .Output }}, error)
{{- end }}
{{- end }}
}

func New{{ $svc }}NRpcClient(nc *nevent.Client, opt ...nevent.EmitOption) {{ $svc }}NRpcClient {
    opList := make([]nevent.EmitOption, 0)
    opList = append(opList, opt ...)
	return &{{ $svc }}NRpcClientImpl{nc: nc, opt: opList} 
}

{{- range .Methods }}
{{- $moptions := options . }}
{{- $msubject := default $moptions.Subject (name .) }}
{{- $subject := printf "nrpc.%s.%s.%s" $fsubject $ssubject $msubject }}
{{- $nrpcoptions := nrpcoptions .}}
{{- $isnrpcfun := $nrpcoptions.Nrpc }}
{{- if $isnrpcfun }}

func (nCli *{{ $svc }}NRpcClientImpl){{ name . }}(ctx context.Context, e *{{ name .Input }}, opts ...grpc.CallOption) (*{{ name .Output }}, error) {
	msg := nats.NewMsg("{{ $subject }}")
	data, err := proto.Marshal(e)
	if err != nil {
		return nil, fmt.Errorf("ask marshal error %w", err)
	}
	msg.Data = data
	resp, err := nCli.nc.Ask(ctx, msg, nCli.opt ...)
	if err != nil {
		return nil, err
	}
	answer := new({{ name .Output }})
	err = proto.Unmarshal(resp, answer)
	if err != nil {
		return nil, fmt.Errorf("answer unmarshal error %w", err)
	}
	return answer, nil
}
{{- end }}
{{- end }}
{{- end }}

{{- end }}
`
